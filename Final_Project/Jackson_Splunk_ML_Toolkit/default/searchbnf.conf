[fit-command]
syntax = fit <algorithm> (<option_name>=<option_value>)* (<algorithm-arg>)+ (into <model_name>)? (as <output_field>)?
shortdesc = Fit and apply a machine learning model to search results.
description = Fit and apply a machine learning model to search results. \
             The algorithm to use is given as the first argument and is required. \p\\
             The following algorithms are available by default: \i\\
             <LinearRegression>, <LogisticRegression>, <SVM>, <PCA>, <KMeans>, <DBSCAN> \p\\
             All algorithms require a list of fields to use when learning a model. \
             For classification and regression algorithms, the first \
             field is the field to predict (i.e. response field) \
             and subsequent fields are the fields to use when \
             making predictions (i.e. explanatory fields). \
             The response field may optionally be followed by the "from" \
             keyword, which is discarded. \
             For unsupervised learning algorithms, the fields \
             are the fields to learn the model on (i.e. for clustering, \
             which fields to cluster over). \p\\
             The "as" keyword can be used to rename the field added to \
             search results by the model. \p\\
             The "into" keyword can be used to store the learned model \
             in an artifact that can later be applied to new search \
             results with the "apply" command. Not all algorithms support saved models. \p\\
             Some algorithms support options which may be given as <name=value> \
             arguments. For instance, <KMeans> and <PCA> both support a \
             "k" option that specifies how many clusters or how many \
             principal components to learn.
comment1 = Fit a LinearRegression model to predict <errors> using <_time> 
example1 = ... | fit LinearRegression errors from _time
comment2 = ... and save it into a model named errors_over_time
example2 = ... | fit LinearRegression errors from _time into errors_over_time
comment3 = Fit a LogisticRegression model to predict a categorical response from numerical measurements
example3 = ... | fit LogisticRegression species from petal_length petal_width sepal_length sepal_width
usage = public
related = apply summary listmodels deletemodel

[apply-command]
syntax = apply <model_name> (as <output_field>)?
shortdesc = Apply a machine learning model previously learned using the "fit" command.
description = The "apply" command will compute predictions for the \
            current search results based on a model previously learned \
            by the "fit" command. It may be used on different search \
            results than those used when fitting the model, but they \
            should have an identical list of fields.\p\\
            The "as" keyword can be used to rename the field added to search results by the model.
comment1 = Apply a previously learned LinearRegression model to predict errors using _time
example1 = ... | apply errors_over_time
comment2 = Rename the output of the model
example2 = ... | apply errors_over_time as predicted_errors
usage = public
related = fit summary listmodels deletemodel

[summary-command]
syntax = summary <model_name>
shortdesc = Return a summary of a machine learning model previous learned using the "fit" command.
description = The "summary" command will return a summary of a machine learning model previous learned using the "fit" command. \
            The summary is algorithm specific. For <LinearRegression>, \
            the summary is a list of coefficients. For \
            <LogisticRegression>, the summary is a list of \
            coefficients for each class.
comment1 = Inspect a previously learned LinearRegression model to predict errors using _time
example1 = | summary errors_over_time
usage = public
related = fit apply listmodels deletemodel

[listmodels-command]
syntax = listmodels
shortdesc = Return a list of machine learning models learned using the "fit" command.
description = The "listmodels" command returns a list of machine \
            learning models learned using the "fit" command. For each \
            model, it displays the algorithm and arguments given when \
            "fit" was invoked. Models may be deleted with the \ 
            "deletemodel" command.
comment1 = List all models
example1 = | listmodels
usage = public
related = fit apply summary deletemodel

[deletemodel-command]
syntax = deletemodel <model_name>
shortdesc = Deletes a machine learning model learned using the "fit" command.
description = The "deletemodel" command can be used to delete a machine \
            learning model learned using the "fit" command. You may \
            get a list of all models using "listmodels".
comment1 = Delete the errors_over_time model
example1 = | deletemodel errors_over_time
usage = public
related = fit apply summary listmodels

[replay-command]
syntax = replay query=<search_query> repeats=<times_to_repeat> maxwait=<max_time_between_events>
shortdesc = Replays the results of the given search query with timestamps set to present.
description = The "deletemodel" command can be used to delete a machine \
            learning model learned using the "fit" command. You may \
            get a list of all models using "listmodels".
comment1 = Returns the top 50 events from main with the timestamp set to present time
example1 = | replay query="search index = main | head 50" repeats=1 maxwait=0"
usage = public
related = fit apply summary listmodels
